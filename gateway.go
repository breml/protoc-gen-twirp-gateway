package main

import (
	"log"
	"text/template"

	pgs "github.com/lyft/protoc-gen-star"
	pgsgo "github.com/lyft/protoc-gen-star/lang/go"
	"google.golang.org/genproto/googleapis/api/annotations"
)

type GatewayModule struct {
	*pgs.ModuleBase
	ctx pgsgo.Context
	tpl *template.Template
}

func NewGatewayModule() *GatewayModule {
	return &GatewayModule{ModuleBase: &pgs.ModuleBase{}}
}

func (g *GatewayModule) InitContext(c pgs.BuildContext) {
	g.ModuleBase.InitContext(c)
	g.ctx = pgsgo.InitContext(c.Parameters())

	tpl := template.New("gw").Funcs(map[string]interface{}{
		"package": g.ctx.PackageName,
		"name":    g.ctx.Name,
		"method":  g.method,
		"pattern": g.pattern,
		"handler": g.handler,
	})

	g.tpl = template.Must(tpl.Parse(tmpl))
}

func (g *GatewayModule) Name() string {
	return "twirp-gateway"
}

func (g *GatewayModule) Execute(targets map[string]pgs.File, pkgs map[string]pgs.Package) []pgs.Artifact {
	for _, t := range targets {
		g.generate(t)
	}

	return g.Artifacts()
}

func (g *GatewayModule) generate(f pgs.File) {
	if len(f.Messages()) == 0 {
		return
	}

	name := g.ctx.OutputPath(f).SetExt(Extension)
	g.AddGeneratorTemplateFile(name.String(), g.tpl, f)
}

func (g *GatewayModule) method(m pgs.Method) pgs.Name {
	rule := &annotations.HttpRule{}
	ok, err := m.Extension(annotations.E_Http, rule) // ok, err

	log.Printf("%+v %+v %+v", ok, err, rule)
	return "METHOD" // TODO(shane): switch
}

func (g *GatewayModule) pattern(m pgs.Method) string {
	return "PATH"
}

func (g *GatewayModule) handler(m pgs.Method) string {
	return "HANDLER"
}

// Extension for output.
const Extension = ".gw.go"

const tmpl = `
// Generated by protoc-gen-twirp-gateway.
package {{ package . }}

import (
	"context"
  "github.com/go-chi/chi" // TODO(shane): Use github.com/shanna/pat internals.
)

{{ range .Services }}
	// {{ .Name }} gateway middleware to internally redirect
	func {{ .Name }}Gateway(next http.Handler) http.Handler {
		r := chi.NewRouter()
		{{ range .Methods }}
			r.Method({{ method . }}, {{ pattern . }}, {{ handler .}})
		{{ end }}
		return r
	}
{{ end }}
`
